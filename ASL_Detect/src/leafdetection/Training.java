/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package leafdetection;

import DataLib.DatabaseGeneric;
import DataLib.SingleLog;
import DataLib.SingleRow;
import algoANN.NeuralNetwork;

import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Training extends javax.swing.JFrame {

    /**
     * Creates new form DataAnalysis1
     */
    DefaultTableModel tmImproved, tmKmeans, tmLog, tmID3, tm;
    Object data[][];
    MainForm parent;
    int selectedColImprovedIndex, selectedColNormal;
    int distanceIndex = 1;

    boolean train = false;
    DatabaseGeneric testDB;
    File file = new File(System.getProperty("user.dir") + "/Patient.csv");
    int inputTotal = 30+18;
    int outputTotal = 32;
  

    public Training(MainForm parent) {
        initComponents();
        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);
        this.parent = parent;
        jTable1.setBackground(Color.black);
        jTable1.setForeground(Color.green);
        jTable1.setRowHeight(24);
        jTable1.setFont(new Font("Arial", Font.BOLD, 12));
        jTable1.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 13));
        jTable1.getTableHeader().setBackground(new Color(205, 205, 205));
       
        showAllData();
       // fillTable();

        // jRadioButtonID3KM.setSelected(true);
        testDB = new DatabaseGeneric();
        

    }

    public int[] convertToInt(double outD[]) {
        int outI[] = new int[outD.length];
        System.out.println();
        for (int i = 0; i < outD.length; i++) {
            outI[i] = 0;
        }

        int maxIndex = 0;
        double maxDist = 0;
        for (int i = 0; i < outD.length; i++) {
            if (maxDist < outD[i]) {
                maxDist = outD[i];
                maxIndex = i;
            }
        }
        outI[maxIndex] = 1;
        return outI;
    }


    double[] getArr(Vector<Object> arr) {
        double temp[] = new double[arr.size()];

        for (int i = 0; i < temp.length; i++) {
            temp[i] = Double.parseDouble(arr.get(i).toString());
        }

        return temp;
    }

    public void showAllData() {

        try {
//            colName = new Object[parent.db.TOTAL_COL];
//            for (int i = 0; i < parent.db.TOTAL_COL; i++) {
//                colName[i] = "COL" + (i + 1);
//            }
            SingleRow sEntry = new SingleRow();
            data = new Object[parent.db.allData.size()][parent.db.TOTAL_COL];
            int totalEntry = parent.db.allData.size();
//           / System.out.println("Size      :" + totalEntry +" Total Col : "+parent.db.TOTAL_COL);
            try {

                for (int i = 0; i < totalEntry; i++) {
                    for (int j = 0; j < parent.db.TOTAL_COL; j++) {
                        data[i][j] = parent.db.allData.get(i).rowData.get(j);
                    }
                }
            } catch (Exception e) {
                System.out.println("Error Found:  " + e);
                e.printStackTrace();
            }

            jTable1.setModel(new DefaultTableModel(data, parent.db.colHeader));
        } catch (Exception e) {
            System.out.println("Error" + e);
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton2 = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("M I N I N I N G    A L G O R I T H M");

        jTabbedPane1.setFont(new java.awt.Font("Andalus", 0, 14)); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("Training");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1335, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Data Managment", jPanel3);

        jButton2.setFont(new java.awt.Font("Andalus", 0, 14)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        parent.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
//        jComboKmeans.removeAllItems();
//        for (int i = 0; i < parent.db.TOTAL_COL; i++) {
//            jComboKmeans.addItem("COL " + (i + 1));
//        }
//
//        jComboColIndex.removeAllItems();
//        for (int i = 0; i < parent.db.TOTAL_COL; i++) {
//            jComboColIndex.addItem("COL " + (i + 1));
//        }
//
//        jComboCluster.removeAllItems();
//        for (int i = 1; i <= 20; i++) {
//            jComboCluster.addItem(i);
//        }
//        jComboCluster.setSelectedIndex(1);
//        ShowLog();
//        showCentroidLog();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    class ExtractTask extends TimerTask {

        @Override
        public void run() {
            try {

                jProgressBar1.setIndeterminate(true);
                NeuralNetwork nn;
                int layers[] = new int[3];
                layers[0] = inputTotal;
                layers[1] = (inputTotal + outputTotal + 1);
                layers[2] = outputTotal;
                long iter = 10000;
                System.out.println("  Total Size:    " + parent.db.allData.size());
                double ip[][] = getInputFeature();
                double op[][] = getOutputFeature();

                for (int i = 0; i < ip.length; i++) {
                    System.out.println("  ");
                    for (int j = 0; j < ip[i].length; j++) {
                        System.out.print(" " + convert2Decimal(ip[i][j]));
                    }
                    System.out.print(" -->");
                    for (int j = 0; j < op[i].length; j++) {
                        System.out.print(" " + (int) op[i][j]);
                    }

                }
                nn = new NeuralNetwork(0.1, 3, layers);//NN(starting till output)
                for (int i = 0; i < iter; i++) {
                    for (int j = 0; j < ip.length; j++) {
                        nn.train(ip[j], op[j]);//back propogation
                    }

                }
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir") + "\\train.dat")));
                out.writeObject(nn);
                out.close();
//                ObjectInputStream oIn = new ObjectInputStream(new FileInputStream(System.getProperty("user.dir") + "\\train.dat"));
//                nn = (NeuralNetwork) (oIn.readObject());
//                System.out.println("TRAINING COMPLETE!!!");
                int index = 0;
                int trueCnt = 0;
                for (int i = 0; i < ip.length; i = i + 146) {
                    trueCnt = 0;
                    for (int j = 0; j < 146; j++) {
                        nn.setInputs(ip[i]);
                        double curr_out_D[] = nn.runNetwork();
                        int data[] = convertToInt(curr_out_D);
                        System.out.println();
                        for (int ii = 0; ii < curr_out_D.length; ii++) {
                            System.out.print(" " + data[ii]);
                        }
                        if (data[index] == 1) {
                            trueCnt++;
                        }
                    }
                    index++;
                    double per = (trueCnt * 1.0 * 100 / 146);
                    System.out.print(" " + parent.db.allData.get(i).rowData.get(0) + "      PER: " + per + "%  " + trueCnt);
                }

                jProgressBar1.setIndeterminate(false);

            } catch (Exception e) {
                System.out.println("  " + e);
                e.printStackTrace();
            }

        }
    }

    double convert2Decimal(double currVal) {
        int temp = (int) (currVal * 100);
        double d = temp * 1.0 / 100;
        return d;
    }

    double[][] getInputFeature() {
        double[][] inputFeature = new double[parent.db.allData.size()][inputTotal];
        for (int j = 0; j < parent.db.allData.size(); j++) {
            SingleRow sr = parent.db.allData.get(j);
            double singleRow[] = new double[inputTotal];
            for (int i = 1; i < sr.rowData.size(); i++) {
                
              
                if(i<=18)
                {
                  singleRow[i - 1] = Double.parseDouble(sr.rowData.get(i).toString()) / 400;
                //  System.out.println("Index(i<=18):  "+i);
                }
                else if (i < (16+18)) {
                    singleRow[i - 1] = Double.parseDouble(sr.rowData.get(i).toString()) / 600;
                  //   System.out.println("Index(i<(16+18)):  "+i);
                } else {
                    singleRow[i - 1] = Double.parseDouble(sr.rowData.get(i).toString()) / 150;
                  //   System.out.println("Index:  "+i);
                }
            }
            inputFeature[j] = singleRow;
        }

        return inputFeature;
    }

    double[][] getOutputFeature() {
        double[][] outputFeature = new double[parent.db.allData.size()][outputTotal];
        for (int i = 0; i < parent.db.allData.size(); i++) {
            for (int j = 0; j < outputTotal; j++) {
                outputFeature[i][j] = 0;
            }
        }
        int index = 0;

        for (int j = 0; j < parent.db.allData.size(); j = j + 146) {
            SingleRow sr = parent.db.allData.get(j);
            for (int i = 0; i < 146; i++) {
                outputFeature[i + j][index] = 1;
            }
            index++;
        }
        return outputFeature;
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        ExtractTask et = new ExtractTask();
        Timer t = new Timer();
        t.schedule(et, 100);

    }//GEN-LAST:event_jButton3ActionPerformed
    int minDistance(int val, int centroid) {
        return Math.abs(val - centroid);
    }

    double getDist(double d1, double d2) {
        return Math.sqrt((Math.abs(d1 - d2) * Math.abs(d1 - d2)));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
